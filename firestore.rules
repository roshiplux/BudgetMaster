rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can only access their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Users can only access their own transactions
    match /transactions/{transactionId} {
      allow read, write, delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
    }
    
    // Users can only access their own bank accounts
    match /bankAccounts/{accountId} {
      allow read, write, delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
    }
    
    // Validate transaction data
    function validateTransaction() {
      let data = request.resource.data;
      return data.keys().hasAll(['userId', 'description', 'amount', 'category', 'type', 'date']) &&
             data.description is string && data.description.size() > 0 && data.description.size() <= 100 &&
             data.amount is number && data.amount > 0 &&
             data.category is string && data.category.size() > 0 &&
             data.type in ['income', 'expense'] &&
             data.date is timestamp;
    }
    
    // Validate bank account data
    function validateBankAccount() {
      let data = request.resource.data;
      return data.keys().hasAll(['userId', 'name', 'type', 'balance']) &&
             data.name is string && data.name.size() > 0 && data.name.size() <= 50 &&
             data.type is string && data.type.size() > 0 &&
             data.balance is number;
    }
    
    // Apply validation rules
    match /transactions/{transactionId} {
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId &&
        validateTransaction();
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        validateTransaction();
    }
    
    match /bankAccounts/{accountId} {
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId &&
        validateBankAccount();
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        validateBankAccount();
    }
  }
}
